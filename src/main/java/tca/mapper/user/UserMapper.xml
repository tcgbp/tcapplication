<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tca.mapper.user.UserMapper">

    <resultMap id="BaseResultMap" type="tca.entity.user.User">
        <result column="id" property="id"/>
        <result column="login_id" property="loginId"/>
        <result column="name" property="name"/>
        <result column="org_id" property="orgId"/>
        <result column="org_name" property="orgName"/>
        <result column="contact" property="contact"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="is_deleted" property="deleted"/>
        <result column="is_locked" property="locked"/>
        <result column="last_login_at" property="lastLoginAt"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <collection property="roles" ofType="tca.entity.role.Role" autoMapping="true">
            <id property="id" column="role_id"/>
            <id property="name" column="role_name"/>
        </collection>
    </resultMap>
    <select id="getUserById" parameterType="long" resultMap="BaseResultMap">select
        u.id,u.login_id,u.name,u.org_id,o.name as org_name,u.contact,u.email,u.password,u.is_deleted,
        u.is_locked,u.last_login_at,u.created_at,u.updated_at
        from users u,organizations o where u.org_id = o.id and u.id = #{id} and u.is_deleted = 0
    </select>
    <update id="deleteUserById" parameterType="long">update users set is_deleted = 1 where id = #{id}</update>
    <insert id="addUser" parameterType="tca.entity.user.User" keyProperty="id">
        insert into users (id, name,org_id,login_id, email, password, contact, is_deleted, created_by)
        values (USER_ID_SEQ.nextval, #{name}, #{orgId}, #{loginId}, #{email}, #{password}, #{contact}, 0, #{createdBy})
        <selectKey keyProperty="id" resultType="long" order="AFTER">
            select id from users where name = #{name}
        </selectKey>
    </insert>
    <update id="updateUser" parameterType="tca.entity.user.User">
        update users set login_id = #{loginId}, name = #{name}, email = #{email}, contact = #{contact},
        password = #{password}, updated_by = #{updatedBy}, updated_at = CURRENT_TIMESTAMP where id = #{id}
    </update>
    <select id="getTotalCount" resultType="long">
        select count(1) from users u
        inner join organizations o on u.org_id = o.id
        where u.is_deleted = 0
        <if test=" search != null and search != '' ">
            and (u.name like '%${search}%' or u.login_id or u.contact like '%${search}%'
            or o.name like '%${search}%') or u.email like '%${search}%')
        </if>
        <if test=" filter != null ">
            <if test=" filter.loginId != null and filter.loginId != '' ">
                and u.login_id like '%${filter.loginId}%'
            </if>
            <if test=" filter.name != null and filter.name != '' ">
                and u.name like '%${filter.name}%'
            </if>
            <if test=" filter.orgName != null and filter.orgName != '' ">
                and o.name like '%${filter.orgName}%'
            </if>
            <if test=" filter.locked != null and filter.locked != '' ">
                and u.is_locked = '${filter.locked}'
            </if>
        </if>
    </select>
    <select id="getTotalNotFilteredCount" resultType="long">select count(1) from users where is_deleted = 0</select>
    <select id="getUserList" resultMap="BaseResultMap">
        select t.*,ur.role_id,r.name as role_name from
        (
        select
        u.id,u.login_id,u.name,u.org_id,o.name as org_name,u.contact,u.email,u.password,u.is_deleted,
        u.is_locked,u.last_login_at, u.created_at,u.updated_at
        from users u
        inner join organizations o on u.org_id = o.id
        where u.is_deleted = 0
        <if test=" search != null and search != '' ">
            and (u.name like '%${search}%' or u.login_id or u.contact like '%${search}%'
            or o.name like '%${search}%') or u.email like '%${search}%')
        </if>
        <if test=" filter != null ">
            <if test=" filter.loginId != null and filter.loginId != '' ">
                and u.login_id like '%${filter.loginId}%'
            </if>
            <if test=" filter.name != null and filter.name != '' ">
                and u.name like '%${filter.name}%'
            </if>
            <if test=" filter.orgName != null and filter.orgName != '' ">
                and o.name like '%${filter.orgName}%'
            </if>
            <if test=" filter.locked != null and filter.locked != '' ">
                and u.is_locked = '${filter.locked}'
            </if>
        </if>
        <if test=" sort != null and sort != '' ">
            order by ${sort} ${order}
        </if>
        offset #{offset} ROWS fetch first #{limit} row only
        ) t
        left join user_roles ur on t.id = ur.user_id
        left join roles r on r.id = ur.role_id
    </select>
</mapper>
